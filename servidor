#!/usr/bin/env python3
# Verificar os casos onde \r\n são enviados separados
import asyncio
from tcp import Servidor
import re

#FLAGS:
IS_CHANNEL = b'#'
TERMINADOR = b'\r\n'

dicionario = {}
canais = {}

def validar_nome(nome):
	return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def sair(conexao):
	conexao.fechar()
	mensagem_quit(conexao)
	dicionario.pop(conexao)

def dados_recebidos(conexao, dados):
	if dados == b'':
		return sair(conexao)
	print(dados)
	#Etapa - 2
	#tratar mensagens "quebradas"

	dados = conexao.msg_residual + dados
	while b'\r\n' in dados:
		primeira_parte_da_mensagem, dados = dados.split(b'\r\n', 1)

		# conexao.msg = conexao.msg_residual + primeira_parte_da_mensagem
		
		#Etapa - 1
		#tratar pings
		if primeira_parte_da_mensagem.startswith(b'PING'):
			print("primeira parte da mensagem: ")
			print(primeira_parte_da_mensagem)
			print("dados: ")
			print(dados)
			print("dados do split")
			print(primeira_parte_da_mensagem.split(b' ', 1))
			print(primeira_parte_da_mensagem.split(b' ', 1)[1])
			conexao.enviar(b':server PONG server :' + primeira_parte_da_mensagem.split(b' ', 1)[1] + TERMINADOR)

		#tratar definição de NICK
		if primeira_parte_da_mensagem.startswith(b'NICK'):
			apelido = primeira_parte_da_mensagem.split(b' ', 1)[1]
			#Etapa 3
			if validar_nome(apelido):
				if check_apelido_em_dicionario(apelido):
					conexao.enviar(b':server 433 ' + conexao.apelido_atual + b' ' + apelido + b' :Nickname is already in use' + TERMINADOR)
				elif conexao.apelido_atual == b'*':
					set_apelido_dicionario(conexao, apelido)
					conexao.enviar(b':server 001 ' + apelido + b' :Welcome' + TERMINADOR)
					conexao.enviar(b':server 422 ' + apelido + b' :MOTD File is missing' + TERMINADOR)
				else:
					apelido_antigo = conexao.apelido_atual
					set_apelido_dicionario(conexao, apelido)
					conexao.enviar(b':' + apelido_antigo + b' NICK ' + apelido + TERMINADOR)
			else:
					conexao.enviar(b':server 432 ' + conexao.apelido_atual + b' ' + apelido + b' :Erroneous nickname' + TERMINADOR)

		#Etapa 5: PRIVMSG
		if primeira_parte_da_mensagem.startswith(b'PRIVMSG'):
			print("resultado do split: ")
			print(primeira_parte_da_mensagem.split(b' ', 2))
			destinatario, conteudo = primeira_parte_da_mensagem.split(b' ', 1)[1].split(b' ', 1)
			print("Destinatário: ")
			print(destinatario)
			print("Conteúdo: ")
			print(conteudo)
			
			conteudo = conteudo[1:] # Para remover o : do início do contéudo
			#Verificando se eh um canal
			if destinatario.startswith(b'#'):
				print("É um canal")
				print("Destinatário: ")
				print(destinatario)
				if check_conexao_em_canal(conexao, destinatario[1:]):
					enviar_mensagem_canal(conexao, destinatario[1:], conteudo)  
			#Se não é canal, então é um outro usuário
			elif check_apelido_em_dicionario(destinatario):
				print("Dicionario: ")
				print(dicionario)
				conexao_destinatario = get_conexao_dicionario(destinatario)
				print("Conexão destinatário: ")
				print(conexao_destinatario)
				
				if not conexao_destinatario == -1:
					print(b'Enviando mensagem para o destinatario: ' + destinatario)
					conexao_destinatario.enviar(b':' + conexao.apelido_atual + b' PRIVMSG ' + destinatario + b' :' + conteudo + TERMINADOR)

		# Se for para participar de um canal
		if primeira_parte_da_mensagem.startswith(b'JOIN'):  
			print("Comeca com join")
			print(primeira_parte_da_mensagem)
			nome_do_canal = primeira_parte_da_mensagem.split(b' ', 1)[1]
			print("nome do canal:")
			print(nome_do_canal)
			if validar_nome(nome_do_canal[1:]):
				print("é canal válido")
				if check_canal_em_canais(nome_do_canal[1:]):
					print("Canal existe.")
					if not check_conexao_em_canal(conexao, nome_do_canal):
						entrar_canal(conexao, nome_do_canal[1:])
				else:
					print("Canal não existe.")
					criar_canal(nome_do_canal[1:])
					entrar_canal(conexao, nome_do_canal[1:])
			else:
				conexao.enviar(b':server 403 ' + nome_do_canal + b' :No such channel' + TERMINADOR)
				
			# nome do canal não é válido

		if primeira_parte_da_mensagem.startswith(b'PART'):
			nome_do_canal = primeira_parte_da_mensagem.split(b' ')[1]
			print("é part")
			print("nome do canal:")
			print(nome_do_canal)
			
			if nome_do_canal.startswith(b'#'):
				if check_canal_em_canais(nome_do_canal[1:]):
					if check_conexao_em_canal(conexao, nome_do_canal[1:]):
						print("Conexao está em canal - part")
						sair_canal(conexao, nome_do_canal[1:])
         
	conexao.msg_residual = dados
 
# -- Funções de conexões simples --
 
def conexao_aceita(conexao):
	conexao.apelido_atual = b'*'
	# conexao.msg = b''
	conexao.msg_residual = b''
	print(conexao, 'nova conexão')
	conexao.registrar_recebedor(dados_recebidos)

def get_conexao_dicionario(apelido):
	global dicionario
	# podemos arrumar essa parte
	if(check_apelido_em_dicionario(apelido)):
		for i, j in (dicionario.items()):
			if j.lower() == apelido.lower():
				return i
	return -1

def set_apelido_dicionario(conexao, apelido):  
	dicionario[conexao] = apelido
	conexao.apelido_atual = apelido

def check_apelido_em_dicionario(apelido):
	for i, j in dicionario.items():
		if apelido.lower() == j.lower():
			return True
	return False  

# -- Funções de canais --


#Envie :server 353 apelido = canal :membro1 membro2 membro3 para o usuário que entrou no canal. A lista de membros deve incluir o apelido do usuário que acabou de entrar e deve estar ordenada em ordem alfabética. Se a lista de membros for muito grande, quebre em várias mensagens desse tipo, cada uma com no máximo 512 caracteres (incluindo a terminação '\r\n').
def criar_canal(nome_canal):
	canais[nome_canal] = []
	print("Canal criado.")

def entrar_canal(conexao, nome_canal):
	print("Entrando no canal")								 
	conexoes = canais[nome_canal]
	conexoes.append(conexao)
	#:apelido JOIN :canal
	enviar_mensagem_generica_canal(nome_canal, b':' + conexao.apelido_atual + b' JOIN :#' + nome_canal + TERMINADOR)
	
	apelido_conexoes_canal = []
	for c in conexoes:
		apelido_conexoes_canal.append(c.apelido_atual)
  
	apelido_conexoes_canal = sorted(apelido_conexoes_canal)
	string_apelidos = b''
	for apelido in apelido_conexoes_canal:
		string_apelidos += apelido + b' '
  
	string_apelidos = string_apelidos[0:-1] #Pois teríamos um caractere vazio no final
	print("string apelidos")
	print(string_apelidos)
	
	conexao.enviar(b':server 353 %s = %s :%s\r\n' % (conexao.apelido_atual, b'#' + nome_canal, string_apelidos))
			
	# :server 366 apelido canal :End of /NAMES list.
	conexao.enviar(b':server 366 %s %s :End of /NAMES list.\r\n' % (conexao.apelido_atual, b'#' + nome_canal))
	
	

def sair_canal(conexao, nome_canal):
	canal = canais[nome_canal]
	mensagem = b':' + conexao.apelido_atual + b' PART #' + nome_canal + TERMINADOR
	enviar_mensagem_generica_canal(nome_canal, mensagem)
	canal.remove(conexao) #pode ser que dê erro que precisa ser tratado

def check_canal_em_canais(nome_canal):
	print("check canal em canais")
	for i, j in canais.items():
		if i.lower() == nome_canal.lower():
			return True
	return False

def check_conexao_em_canal(conexao, nome_canal):
	print("check conexao em canal")
	
	for nome_c, canal in canais.items():
		if nome_c.lower() == nome_canal.lower():
			if conexao in canal:
				return True
	return False

def enviar_mensagem_generica_canal(canal_destinatario, mensagem_generica):
	for nome_canal, canal in canais.items():
		if nome_canal.lower() == canal_destinatario.lower():
			for cada_conexao in canal:
				print(b"Enviando mensagem generica " + mensagem_generica + b" para " + cada_conexao.apelido_atual)
				cada_conexao.enviar(mensagem_generica)
				

def enviar_mensagem_canal(conexao_remetente, canal_destinatario, conteudo):
	print("Enviando mensagem para o canal...")
	#:remetente PRIVMSG destinatário :conteúdo
	for nome_do_canal, canal in canais.items():
		if nome_do_canal.lower() == canal_destinatario.lower():
			for cada_conexao in canal:
				if not cada_conexao == conexao_remetente:
					cada_conexao.enviar(b':%s PRIVMSG %s :%s\r\n' % (conexao_remetente.apelido_atual, b'#' + canal_destinatario, conteudo))
    

def mensagem_quit(conexao):
	conexoes_pendentes = []
	for i, j in dicionario.items():
		if not i == conexao:
	  		conexoes_pendentes.append(i)

	for nome_canal, canal in canais.items():
		if conexao in canal:
			canal.remove(conexao)
				  
			for outra_conexao in canal:
				if outra_conexao in conexoes_pendentes:
					outra_conexao.enviar(b':'+ conexao.apelido_atual + b' QUIT :Connection closed' + TERMINADOR)
					conexoes_pendentes.remove(outra_conexao)
     

	
servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()